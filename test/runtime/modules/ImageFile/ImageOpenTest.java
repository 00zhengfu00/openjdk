/*
 * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * @test ImageOpenTest
 * @summary Unit test for JVM_ImageOpen() method
 * @author sergei.pikalev@oracle.com
 * @library /testlibrary /../../test/lib
 * @build ImageOpenTest
 * @run main ClassFileInstaller sun.hotspot.WhiteBox
 *                              sun.hotspot.WhiteBox$WhiteBoxPermission
 * @run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI ImageOpenTest
 */

import java.io.File;
import java.nio.ByteOrder;
import sun.hotspot.WhiteBox;

public class ImageOpenTest {

    public static final WhiteBox wb = WhiteBox.getWhiteBox();

    public static void main(String... args) throws Exception {
        String javaHome = System.getProperty("java.home");
        String nonexistentImageFile = javaHome + "/lib/modules/nonexistent.jimage";
        String bootmodulesImageFile = javaHome + "/lib/modules/bootmodules.jimage";

        if (!(new File(bootmodulesImageFile)).exists()) {
            System.out.printf("Test skipped.");
            return;
        }

        if (!testImageOpen(nonexistentImageFile, bootmodulesImageFile))
            throw new RuntimeException("Some cases are failed");
    }

    private static boolean testImageOpen(String nonExistentImage, String bootImage) {
        boolean bigEndian = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN;
        boolean passed = true;

        // open nonexistent image
        long id = wb.imageOpenImage(nonExistentImage, bigEndian);
        if (id == 0L) {
            System.out.println("Passed. Get id 0 on opening nonexistent file");
        } else {
            System.out.printf("Failed. Get id %d instead of 0 on opening nonexistent file\n", id);
            passed = false;
        }
        wb.imageCloseImage(id);

        // open bootmodules image
        id = wb.imageOpenImage(bootImage, bigEndian);
        if (id != 0) {
            System.out.printf("Passed. Get id %d on opening bootmodules.jimage\n", id);
        } else {
            System.out.println("Failed. Get id 0 on opening bootmodules.jimage");
            passed = false;
        }
        wb.imageCloseImage(id);

        // non-native endian
        id = wb.imageOpenImage(bootImage, !bigEndian);
        if (id != 0) {
            System.out.printf("Passed. Get id %d on opening bootmodules.jimage with non-native endian", id);
        } else {
            System.out.println("Failed. Get id 0 on opening bootmodules.jimage with non-native endian");
            passed = false;
        }
        wb.imageCloseImage(id);

        //
        // open several times
        //
        id = wb.imageOpenImage(bootImage, bigEndian);
        long id1 = wb.imageOpenImage(bootImage, bigEndian);
        long id2 = wb.imageOpenImage(bootImage, bigEndian);
        if ((id == id1) && (id == id2)) {
            System.out.printf("Passed. Open three times with equal ids %d", id);
        } else {
            System.out.printf("Failed. Open thee times with ids %d %d %d", id, id1, id2);
            passed = false;
        }
        wb.imageCloseImage(id);
        wb.imageCloseImage(id1);
        wb.imageCloseImage(id2);

        return passed;
    }
}

/*
 * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package jdk.jigsaw.module.internal;

import java.io.IOException;
import java.io.UncheckedIOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.StringJoiner;

/**
 * Utility class for computing hashes (message digests).
 */

public class Hasher {
    private Hasher() { }

    /**
     * Computes the MD5 hash of the given file and returns it encoded
     * as a hex String.
     *
     * @throws UncheckedIOException if an I/O error occurs
     */
    public static String generateMD5(Path file) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(Files.readAllBytes(file));
            byte[] bytes = md.digest();
            StringBuilder sb = new StringBuilder();
            for (byte b: bytes) {
                String hs = Integer.toHexString(0xff & b);
                if (hs.length() == 1)
                    sb.append('0');
                sb.append(hs);
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new InternalError(e);
        } catch (IOException ioe) {
            throw new UncheckedIOException(ioe);
        }
    }

    /**
     * Returns a String that encodes the MD5 hash of each entry in the
     * given map. The map key is the name, typically the module name.
     * The map value is a file path to the module artifact on the file
     * system.
     */
    public static String generateMD5(Map<String, Path> map) {
        StringJoiner joiner = new StringJoiner(",");
        for (Map.Entry<String, Path> entry: map.entrySet()) {
            String name = entry.getKey();
            Path path = entry.getValue();
            String digest = generateMD5(path);
            joiner.add(name + "/" + digest);
        }
        return joiner.toString();
    }

    /**
     * Decodes a String generated by {@link #generateMD5}. The map key
     * is the entry name, typically the module name. The map value is
     * the MD5 hash of the module artifact encoded as a hex String.
     */
    public static Map<String, String> decode(String s) {
        if (s == null)
            return Collections.emptyMap();
        Map<String, String> map = new HashMap<>();
        for (String element: s.split(",")) {
            int i = element.indexOf('/');
            if (i > 0) {
                String name = element.substring(0, i);
                String hash = element.substring(i+1, element.length());
                map.put(name, hash);
            }
        }
        return map;
    }
}

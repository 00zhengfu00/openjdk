main.usage.summary=\
Usage: {0} <create|list> <options> jmod-file\n\
use --help for a list of possible options

main.usage=\
Usage: {0} <create|list> <options> jmod-file

error.prefix=Error:
warn.prefix=Warning:

main.non.opt.args=\
\create    - Creates a new jmod archive\n\
\list      - Prints the names of all the entries in the jmod\n\
\jmod-file - The jmod archive to operate on

main.opt.help=Print this usage message
main.opt.version=Version information
main.opt.class-path=Application jar files|dir containing classes
main.opt.libs=Location of native libraries
main.opt.cmds=Location of native commands
main.opt.config=Location of user-editable config files
main.opt.module-version= Module version
main.opt.modulepath=Module path
main.opt.main-class=Main class
main.opt.main-class.arg=class-name
main.opt.hash-dependencies=Compute and record hashes of dependencies matched by the pattern
main.opt.cmdfile=Read options from the specified file

err.classpath.must.be.specified=--class-path must be specified
err.jmod.must.be.specified=jmod-file must be specified
err.missing.task=one of create or list must be specified
err.invalid.task=task must be create|list: {0}
err.invalid.version=invalid module version {0}
err.output.must.be.specified:--output must be specified
err.mods.must.be.specified:--mods must be specified
err.cp.must.be.specified:--class-path must be specified
err.modulepath.must.be.specified:--module-path must be specified when hashing dependencies
err.invalid.main-class:invalid main-class name: {0}
err.path.not.found=path not found: {0}
err.path.not.valid=invalid path: {0}
err.path.not.a.dir=path must be a directory: {0}
err.invalid.class.path.entry=invalid class path entry: {0}
err.dir.not.empty=not empty: {0}
err.file.already.exists=file already exists: {0}
err.jmod.not.found=no jmod file found: {0}
err.bad.pattern=bad pattern {0}
err.unknown.option=unknown option(s): {0}
err.missing.arg=no value given for {0}
err.internal.error=internal error: {0} {1} {2}
err.invalid.arg.for.option=invalid argument for option: {0}
err.option.after.class=option must be specified before classes: {0}
warn.invalid.arg=Invalid classname or pathname not exist: {0}

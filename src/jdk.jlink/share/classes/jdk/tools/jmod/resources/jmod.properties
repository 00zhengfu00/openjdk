main.usage.summary=\
Usage: {0} <create|list> <options> jmod-file\n\
use --help for a list of possible options

main.usage=\
Usage: {0} <create|list> <options> jmod-file\n\
\  create  - Creates a new jmod archive\n\
\  list    - Prints the names of all the entries in the jmod\n\
\n\
Possible options include:

error.prefix=Error:
warn.prefix=Warning:

main.opt.help=\
\  --help                               Print this usage message

main.opt.version=\
\  --version                            Version information

main.opt.class-path=\
\  --class-path <jar-files|classes>     Application jar files|dir containing classes

main.opt.libs=\
\  --libs <path>                        Location of native libraries

main.opt.cmds=\
\  --cmds <path>                        Location of native commands

main.opt.config=\
\  --config <path>                      Location of user-editable config files

main.opt.module-version=\
\  --module-version <version>           Module version

main.opt.modulepath=\
\  --modulepath <modulepath>            Module path

main.opt.main-class=\
\  --main-class <main-class>            Main class

main.opt.hash-dependences=\
\  --hash-dependences <pattern>         Compute and record the hashes of \
                                        dependences matched by <pattern>


err.jmod.must.be.specified=jmod-file must be specified
err.invalid.task=task must be create|list: {0}
err.output.must.be.specified:--output must be specified
err.mods.must.be.specified:--mods must be specified
err.cp.must.be.specified:--class-path must be specified
err.modulepath.must.be.specified:--module-path must be specified when hashing dependences
err.path.not.found=path not found: {0}
err.path.not.valid=invalid path: {0}
err.dir.not.empty=not empty: {0}
err.file.already.exists=file already exists: {0}
err.jmod.not.found=no jmod file found: {0}
err.badpattern=bad pattern {0}
err.unknown.option=unknown option: {0}
err.missing.arg=no value given for {0}
err.internal.error=internal error: {0} {1} {2}
err.invalid.arg.for.option=invalid argument for option: {0}
err.option.after.class=option must be specified before classes: {0}
err.option.unsupported={0} not supported: {1}
warn.invalid.arg=Invalid classname or pathname not exist: {0}
warn.split.package=package {0} defined in {1} {2}

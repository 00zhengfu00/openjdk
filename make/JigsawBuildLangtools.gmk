#
# Copyright (c) 2011, 2014, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# This makefile snippet contains the logic for generating sources for the
# langtools repo and compiling the interim javac.

LANGTOOLS_MAKEFILE := $(lastword $(MAKEFILE_LIST))

include $(SPEC)
include JigsawSpecMod.gmk
include MakeBase.gmk
include JavaCompilation.gmk

################################################################################

# The BOOT_JAVAC setup uses the bootdir compiler to compile the tools
# and the bootstrap javac, to be run by the bootdir jvm.
$(eval $(call SetupJavaCompiler,BOOT_JAVAC, \
    JAVAC := $(JAVAC), \
    SERVER_DIR := $(SJAVAC_SERVER_DIR), \
    SERVER_JVM := $(SJAVAC_SERVER_JAVA), \
    FLAGS := -XDignore.symbol.file=true -g -Xlint:all$(COMMA)-deprecation -Werror))

# javax.tools.JavaCompilerTool isn't really a suffix but this gets the file copied.
RESOURCE_SUFFIXES := .gif .xml .css .js javax.tools.JavaCompilerTool

################################################################################

# Now setup the compilation of the properties compilation tool. You can depend
# upon $(BUILD_TOOLS) to trigger a compilation of the tools. 
$(eval $(call SetupJavaCompilation,BUILD_TOOLS, \
    SETUP := BOOT_JAVAC, \
    DISABLE_SJAVAC := true, \
    ADD_JAVAC_FLAGS := -Xprefer:source, \
    SRC := $(LANGTOOLS_TOPDIR)/make/tools, \
    INCLUDES := compileproperties, \
    BIN := $(LANGTOOLS_OUTPUTDIR)/btclasses))

# The compileprops tools compiles a properties file into a resource bundle.
TOOL_COMPILEPROPS_CMD := $(JAVA) -cp $(LANGTOOLS_OUTPUTDIR)/btclasses compileproperties.CompileProperties -quiet

# Lookup the properties that need to be compiled into resource bundles.
PROPSOURCES := $(shell $(FIND) $(LANGTOOLS_TOPDIR)/src/share/modules -name "*.properties")

# Strip away prefix and suffix, leaving for example only: "com/sun/tools/javac/resources/javac_zh_CN"
PROPPATHS := $(patsubst $(LANGTOOLS_TOPDIR)/src/share/modules/%.properties, %, $(PROPSOURCES))

# Generate the list of java files to be created.
PROPJAVAS := $(patsubst %, $(LANGTOOLS_OUTPUTDIR)/gensrc/%.java, $(PROPPATHS))

# Generate the package dirs for the to be generated java files.
PROPDIRS := $(dir $(PROPJAVAS))

# Now generate a sequence of "-compile ...javac_zh_CN.properties ...javac_zh_CN.java java.util.ListResourceBundle"
# suitable to be fed into the CompileProperties command.
PROPCMDLINE := $(subst _SPACE_, $(SPACE), $(join $(addprefix -compile_SPACE_, $(PROPSOURCES)), \
    $(addsuffix _SPACE_java.util.ListResourceBundle, $(addprefix _SPACE_$(LANGTOOLS_OUTPUTDIR)/gensrc/, $(addsuffix .java, $(PROPPATHS))))))

# Now setup the rule for the generation of the resource bundles.
$(LANGTOOLS_OUTPUTDIR)/gensrc/_the_props: $(PROPSOURCES) $(BUILD_TOOLS)
	$(RM) -r $(@D)/*
	$(MKDIR) -p $(@D) $(PROPDIRS)
	$(PRINTF) "jdk=$(JDK_VERSION)\nfull=$(FULL_VERSION)\nrelease=$(RELEASE)\n" > $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/javah/resources/version.properties
	$(PRINTF) "jdk=$(JDK_VERSION)\nfull=$(FULL_VERSION)\nrelease=$(RELEASE)\n" > $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/javap/resources/version.properties
	$(PRINTF) "jdk=$(JDK_VERSION)\nfull=$(FULL_VERSION)\nrelease=$(RELEASE)\n" > $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/javac/resources/version.properties
	$(PRINTF) "jdk=$(JDK_VERSION)\nfull=$(FULL_VERSION)\nrelease=$(RELEASE)\n" > $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/jdeps/resources/version.properties
	$(PRINTF) "jdk=$(JDK_VERSION)\nfull=$(FULL_VERSION)\nrelease=$(RELEASE)\n" > $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/javadoc/resources/version.properties
	$(ECHO) Compiling $(words $(PROPSOURCES) v1 v2 v3) properties into resource bundles
	$(TOOL_COMPILEPROPS_CMD) $(PROPCMDLINE) \
	    -compile $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/javah/resources/version.properties \
	        $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/javah/resources/version.java \
	        java.util.ListResourceBundle \
	    -compile $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/javap/resources/version.properties \
	        $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/javap/resources/version.java \
	        java.util.ListResourceBundle \
	    -compile $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/javac/resources/version.properties \
	        $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/javac/resources/version.java \
	        java.util.ListResourceBundle \
	    -compile $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/jdeps/resources/version.properties \
	        $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/jdeps/resources/version.java \
	        java.util.ListResourceBundle \
	    -compile $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/javadoc/resources/version.properties \
	        $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools/com/sun/tools/javadoc/resources/version.java \
	        java.util.ListResourceBundle
	$(TOUCH) $@

################################################################################

# Since the java compilation depends on files generated above, we need to execute
# the below macro in a separate make instance so that it may find those files and
# treat them as dependencies.
ifeq ($(UNHIDE_INTERIM_LANGTOOLS), true)
  # Setup the rules to build the interim javac which can be compiled by the boot
  # javac and run on the boot jdk.
  $(eval $(call SetupJavaCompilation,BUILD_INTERIM_LANGTOOLS, \
      SETUP := BOOT_JAVAC, \
      DISABLE_SJAVAC := true, \
      SRC := $(LANGTOOLS_TOPDIR)/src/share/modules/jdk.compiler \
          $(LANGTOOLS_TOPDIR)/src/share/modules/jdk.devtools \
          $(LANGTOOLS_TOPDIR)/src/share/modules/jdk.base \
          $(LANGTOOLS_OUTPUTDIR)/gensrc/jdk.devtools, \
      EXCLUDES := com/sun/tools/javac/nio, \
      COPY := $(RESOURCE_SUFFIXES), \
      BIN := $(LANGTOOLS_OUTPUTDIR)/btclasses/interim))

  $(eval $(call SetupArchive,ARCHIVE_INTERIM_LANGTOOLS, $(BUILD_INTERIM_LANGTOOLS), \
      SRCS := $(LANGTOOLS_OUTPUTDIR)/btclasses/interim, \
      JAR := $(BOOTSTRAP_JAVAC_JAR), \
      SUFFIXES := .class $(RESOURCE_SUFFIXES)))

  interim-langtools-internal: $(BOOTSTRAP_JAVAC_JAR)
endif

interim-langtools: $(LANGTOOLS_OUTPUTDIR)/gensrc/_the_props
	$(MAKE) -f $(LANGTOOLS_MAKEFILE) interim-langtools-internal UNHIDE_INTERIM_LANGTOOLS=true

################################################################################

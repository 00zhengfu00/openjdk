#
# Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# This must be the first rule
default: all

include $(SPEC)
SHUFFLED := true
include JigsawSpecMod.gmk
include MakeBase.gmk

# Include Profile information for legacy profiles images
include $(JDK_TOPDIR)/make/ProfileNames.gmk

#ifeq ($(IS_GNU_TIME), yes)
#  MAKE := $(TIME) -f '%E %C' $(MAKE)
#endif

# All modules for the current target platform
ALL_MODULES := $(call FindAllModules)

################################################################################
################################################################################
#
# Recpipes for all targets
#
################################################################################

################################################################################
# Interim/build tools targets, compiling tools used during the build

interim-langtools:
	+($(CD) $(LANGTOOLS_TOPDIR)/make && $(MAKE) -f CompileInterim.gmk SHUFFLED=true)

interim-corba:
	+($(CD) $(CORBA_TOPDIR)/make && $(MAKE) -f CompileCorba.gmk SHUFFLED=true)

build-tools-jdk:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f Tools.gmk java-tools SHUFFLED=true)

.PHONY: interim-langtools interim-corba build-tools-jdk

################################################################################
# Special targets for certain modules

genclasses:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f GenerateClasses.gmk SHUFFLED=true)

import-hotspot:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f Import.gmk hotspot SHUFFLED=true)

policy-jars:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CreatePolicyJars.gmk SHUFFLED=true)

.PHONY: genclasses import-hotspot policy-jars

################################################################################
# Gensrc targets, generating source before java compilation can be done
JDK_GENSRC_MODULES := java.base java.desktop jdk.attach jdk.charsets jdk.jconsole jdk.jdi
LANGTOOLS_GENSRC_MODULES := jdk.compiler.tools
CORBA_GENSRC_MODULES := java.corba
GENSRC_MODULES := $(JDK_GENSRC_MODULES) $(LANGTOOLS_GENSRC_MODULES) \
    $(CORBA_GENSRC_MODULES)
JDK_GENSRC_TARGETS := $(addsuffix -gensrc, $(JDK_GENSRC_MODULES))
LANGTOOLS_GENSRC_TARGETS := $(addsuffix -gensrc, $(LANGTOOLS_GENSRC_MODULES))
CORBA_GENSRC_TARGETS := $(addsuffix -gensrc, $(CORBA_GENSRC_MODULES))
GENSRC_TARGETS := $(addsuffix -gensrc, $(GENSRC_MODULES))

jdk.compiler.tools-gensrc:
	+($(CD) $(LANGTOOLS_TOPDIR)/make && $(MAKE) -f GensrcLangtools.gmk SHUFFLED=true)

java.corba-gensrc:
	+($(CD) $(CORBA_TOPDIR)/make && $(MAKE) -f GensrcCorba.gmk SHUFFLED=true)

define DeclareJdkGensrcRecipe
  $1-gensrc:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f GenerateSources.gmk $1 SHUFFLED=true)
endef

$(foreach m, $(JDK_GENSRC_MODULES), $(eval $(call DeclareJdkGensrcRecipe,$m)))

.PHONY: $(GENSRC_TARGETS)

################################################################################
# Generate data
GENDATA_MODULES := java.base java.desktop
GENDATA_TARGETS := $(addsuffix -gendata, $(GENDATA_MODULES))

define DeclareGendataRecipe
  $1-gendata:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f GenerateData.gmk $1 SHUFFLED=true)
endef

$(foreach m, $(GENDATA_MODULES), $(eval $(call DeclareGendataRecipe,$m)))

.PHONY: $(GENDATA_TARGETS)

################################################################################
# Copy files
COPYFILES_MODULES := \
    java.base java.desktop jdk.jdwp.agent jdk.hprof.agent java.management \
    java.logging jdk.crypto.pkcs11 jdk.crypto.ucrytpo
ifndef OPENJDK
  COPYFILES_MODULES += jdk.jfr
endif
COPYFILES_TARGETS := $(addsuffix -copyfiles, $(COPYFILES_MODULES))

define DeclareCopyFilesRecipe
  $1-copyfiles:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CopyFiles.gmk $1 SHUFFLED=true)
endef

$(foreach m, $(COPYFILES_MODULES), $(eval $(call DeclareCopyFilesRecipe,$m)))

.PHONY: $(COPYFILES_TARGETS)

################################################################################
# Compile all java modules. Nashorn is treated separately.
JAVA_MODULES := $(call FindJavaModules)
JAVA_TARGETS := $(addsuffix -java, $(JAVA_MODULES))

define DeclareCompileJavaRecipe
  $1-java:
	+($(CD) $(SRC_ROOT)/make && $(MAKE) -f CompileJavaModules.gmk $1 SHUFFLED=true JAVA_MODULES=$1)
endef

$(foreach m, $(filter-out jdk.scripting.nashorn, $(JAVA_MODULES)), \
    $(eval $(call DeclareCompileJavaRecipe,$m)))

# Build nashorn. Needs to be compiled separately from the rest of the modules
# due to nasgen.
jdk.scripting.nashorn-java:
	+($(CD) $(NASHORN_TOPDIR)/make && $(MAKE) -f BuildNashorn.gmk compile SHUFFLED=true)

.PHONY: $(JAVA_TARGETS)

################################################################################
# Compile native libraries
ALL_LIB_MODULES := \
    java.base java.desktop java.instrument java.management java.scripting jdk.sctp \
    jdk.security.auth java.security.jgss jdk.crypto.mscapi jdk.crypto.pkcs11 \
    java.smartcardio jdk.crypto.ec jdk.crypto.ucrytpo jdk.attach \
    jdk.jdwp.agent jdk.jdi jdk.hprof.agent jdk.runtime java.prefs
LIB_MODULES := $(filter $(ALL_MODULES), $(ALL_LIB_MODULES))
LIB_TARGETS := $(addsuffix -libs, $(LIB_MODULES))

define DeclareCompileNativeLibsRecipe
  $1-libs:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CompileNativeLibraries.gmk \
	    $1 SHUFFLED=true)
endef

$(foreach m, $(LIB_MODULES), $(eval $(call DeclareCompileNativeLibsRecipe,$m)))

.PHONY: $(LIB_TARGETS)

################################################################################
# Compile native executables
ALL_LAUNCHER_MODULES := \
    java.base java.corba java.desktop java.rmi java.scripting java.security.jgss \
    jdk.attach jdk.compiler jdk.hotspot.agent jdk.javadoc jdk.jconsole jdk.jdi \
    jdk.jvmstat jdk.runtime jdk.scripting.nashorn jdk.xml.bind jdk.xml.ws \
    jdk.jcmd jdk.dev jdk.rmic
LAUNCHER_MODULES := $(filter $(ALL_MODULES), $(ALL_LAUNCHER_MODULES))
LAUNCHER_TARGETS := $(addsuffix -launchers, $(LAUNCHER_MODULES))

define DeclareCompileLaunchersRecipe
  $1-launchers:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CompileLaunchers.gmk $1 SHUFFLED=true)
endef

$(foreach m, $(LAUNCHER_MODULES), $(eval $(call DeclareCompileLaunchersRecipe,$m)))

.PHONY: $(LAUNCHER_TARGETS)

################################################################################
# Build hotspot into the legacy build output dir for now.

hotspot:
	($(CD) $(SRC_ROOT)/make && $(MAKE) $(MAKE_ARGS) -f HotspotWrapper.gmk SHUFFLED=true)

.PHONY: hotspot

################################################################################
# Build demos and samples

demos:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CompileDemos.gmk SHUFFLED=true)

samples:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CopySamples.gmk SHUFFLED=true)

.PHONY: demos samples

################################################################################
# Generate the modules.ser file

java-modules:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f GenerateModules.gmk SHUFFLED=true)

.PHONY: java-modules

################################################################################
# Create jmods and images

jmods:
	+($(CD) $(SRC_ROOT)/make && $(MAKE) -I $(JDK_TOPDIR)/make \
	    -f CreateJmods.gmk SHUFFLED=true jmods)

module-images:
	+($(CD) $(SRC_ROOT)/make && $(MAKE) -I $(JDK_TOPDIR)/make \
	    -f Images.gmk SHUFFLED=true)

.PHONY: jmods module-images

################################################################################
# Legacy image targets

# Stores the tips for each repository. This file is be used when constructing the jdk image and can be
# used to track the exact sources used to build that image.
source-tips: $(OUTPUT_ROOT)/source_tips
$(OUTPUT_ROOT)/source_tips: FRC
	@$(MKDIR) -p $(@D)
	@$(RM) $@
	@$(call GetSourceTips)

security-jars:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CreateSecurityJars.gmk SHUFFLED=true)

nashorn-jar:
	+($(CD) $(NASHORN_TOPDIR)/make && $(MAKE) -f BuildNashorn.gmk all SHUFFLED=true)

# Creates the legacy jar files (rt.jar resources.jar etc)
legacy-jars:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CreateJars.gmk SHUFFLED=true)

# Creates the legacy images (j2sdk-image j2re-image etc)
legacy-images:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f Images.gmk SHUFFLED=true)
        ifeq ($(OPENJDK_TARGET_OS), macosx)
	  +($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f Bundles.gmk SHUFFLED=true)
        endif

# Create Compact Profile jars
# Need to depend on create-jars as otherwise there will races between all the
# invocations of CreateJars.gmk.
%-profile-jars:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) PROFILE=$* -f CreateJars.gmk SHUFFLED=true)

# Create Compact Profile images
%-profile-images:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) PROFILE=$* \
	    JRE_IMAGE_DIR=$(IMAGES_OUTPUTDIR)/j2re-$(word $(call profile_number,$*),$(PROFILE_NAMES))-image \
	    -f Images.gmk profile-image SHUFFLED=true)

.PHONY: source-tips security-jars nashorn-jar legacy-jars legacy-images \
    $(addsuffix -profile-jars, $(ALL_PROFILES)) \
    $(addsuffix -profile-images, $(ALL_PROFILES))

################################################################################

# Two source files needed for doc generation are generated in jdk-genclasses.
docs-javadoc:
	+($(CD) $(SRC_ROOT)/make && $(MAKE) -f Javadoc.gmk docs SHUFFLED=true)

docs-jvmtidoc:
	+($(CD) $(SRC_ROOT)/make && $(MAKE) -f Javadoc.gmk jvmtidocs SHUFFLED=true)

.PHONY: docs-javadoc docs-jvmtidoc

################################################################################
################################################################################
#
# Dependency declarations between targets
#
################################################################################

interim-langtools: $(LANGTOOLS_GENSRC_TARGETS)

$(JDK_GENSRC_TARGETS) $(CORBA_GENSRC_TARGETS): interim-langtools

$(JDK_GENSRC_TARGETS): build-tools-jdk

interim-corba: $(CORBA_GENSRC_TARGETS)

jdk.nashorn-java: java.base-java java.logging-java java.scripting-java

build-tools-jdk: interim-langtools

$(GENDATA_TARGETS): interim-langtools build-tools-jdk

genclasses: interim-langtools interim-corba java

import-hotspot: hotspot

$(LIB_TARGETS): import-hotspot

$(LAUNCHER_TARGETS): java.base-libs

demos: $(JAVA_TARGETS)

# Declare dependency from <module>-java to <module>-gensrc
$(foreach m, $(GENSRC_MODULES), $(eval $m-java: $m-gensrc))

# Declare dependencies between java modules
$(foreach m, $(JAVA_MODULES), \
    $(eval $m-java: $(addsuffix -java, $(filter $(JAVA_MODULES), \
    $(call FindDepsForModule,$m)))))

# Declare dependencies from <module>-lib to <module>-java
# Skip jdk.jdwp until we handle module-info.java in javac.
$(foreach m, $(filter-out jdk.jdwp, $(LIB_MODULES)), $(eval $m-libs: $m-java))

# Declare dependencies from all other <module>-lib to java.base-lib
$(foreach t, $(filter-out java.base-libs, $(LIB_TARGETS)), \
    $(eval $t: java.base-libs))

# This dependency needs to be explicitly declared. jdk.jdi-gensrc generates a 
# header file used by jdk.jdwp libs.
jdk.jdwp-libs: jdk.jdi-gensrc

# Explicitly add dependencies for special targets
java.base: import-hotspot policy-jars
java.rmi jdk.naming.rmi java.management: genclasses
# Part of the contents of this module is produced by the hotspot build and the 
# import step will provide it.
jdk.hotspot.agent-java: import-hotspot

java-modules: $(JAVA_TARGETS) genclasses

jmods: exploded-image java-modules

module-images: jmods

################################################################################
# Virtual targets without recipes

gensrc: $(GENSRC_TARGETS)

gendata: $(GENDATA_TARGETS)

copyfiles: $(COPYFILES_TARGETS)

java: $(JAVA_TARGETS)

libs: $(LIB_TARGETS)

launchers: $(LAUNCHER_TARGETS)

# Declare dependencies from <module> to all the individual targets specific
# to that module <module>-*.
# TODO: get jmods in this too
$(foreach m, $(GENSRC_MODULES), $(eval $m: $m-gensrc))
$(foreach m, $(JAVA_MODULES), $(eval $m: $m-java))
$(foreach m, $(GENDATA_MODULES), $(eval $m: $m-gendata))
$(foreach m, $(LIB_MODULES), $(eval $m: $m-libs))
$(foreach m, $(LAUNCHER_MODULES), $(eval $m: $m-launchers))
$(foreach m, $(COPYFILES_MODULES), $(eval $m: $m-copyfiles))

ALL_MODULE_TARGETS := $(sort $(GENSRC_MODULES) $(JAVA_MODULES) \
    $(GENDATA_MODULES) $(LIB_MODULES) $(LAUNCHER_MODULES) $(COPYFILES_MODULES))

exploded-image: $(ALL_MODULE_TARGETS)

images: module-images

.PHONY: gensrc jdk.hotspot.agent-java java libs launchers exploded-image images \
     $(ALL_MODULE_TARGETS)

################################################################################
# Legacy targets

security-jars: java

nashorn-jar: jdk.scripting.nashorn-java

legacy-jars: java security-jars nashorn-jar genclasses

legacy-images: legacy-jars demos samples exploded-image source-tips

%-profile-jars: create-jars

%-profile-images: %-profile-jars demos samples exploded-image source-tips

################################################################################
# Virtual legacy targets

# Make each profile name a target that depends on it's images target.
$(foreach p, $(ALL_PROFILES), $(eval $(p): $(p)-profile-images))

legacy-profiles: $(ALL_PROFILES)

.PHONY: legacy-jdk $(ALL_PROFILES) legacy-profiles

################################################################################

# Two source files needed for doc generation are generated in jdk-genclasses.
docs-javadoc: $(GENSRC_TARGETS) genclasses

docs-jvmtidoc: hotspot

################################################################################

docs: docs-javadoc docs-jvmtidoc

.PHONY: docs

################################################################################
# Make sure hotspot is always run first
interim-langtools: | hotspot
security-jars: | hotspot
samples: | hotspot

################################################################################

all: images

.PHONY: default all

FRC: # Force target

#
# Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# This must be the first rule
default: all

include $(SPEC)
JIGSAW := true
include JigsawSpecMod.gmk
include MakeBase.gmk

# Include Profile information for legacy profiles images
include $(JDK_TOPDIR)/make/ProfileNames.gmk

################################################################################

langtools-gensrc:
	+($(CD) $(LANGTOOLS_TOPDIR)/make && $(MAKE) -f GensrcLangtools.gmk SHUFFLED=true)

langtools-interim: langtools-gensrc
	+($(CD) $(LANGTOOLS_TOPDIR)/make && $(MAKE) -f CompileInterim.gmk SHUFFLED=true)

.PHONY: langtools-gensrc langtools-interim

################################################################################

corba-gensrc: langtools-interim
	+($(CD) $(CORBA_TOPDIR)/make && $(MAKE) -f GensrcCorba.gmk SHUFFLED=true)

corba-interim: corba-gensrc
	+($(CD) $(CORBA_TOPDIR)/make && $(MAKE) -f CompileCorba.gmk SHUFFLED=true)

.PHONY: corba-gensrc

################################################################################
# Build nashorn. Needs to be compiled separately from the rest of the modules
# due to special needs.
nashorn: java-compile
	+($(CD) $(NASHORN_TOPDIR)/make && $(MAKE) -f BuildNashorn.gmk compile SHUFFLED=true)

.PHONY: nashorn

################################################################################
# Build hotspot into the legacy build output dir for now.

hotspot:
	($(CD) $(SRC_ROOT)/make && $(MAKE) $(MAKE_ARGS) -f HotspotWrapper.gmk SHUFFLED=true)

.PHONY: hotspot

################################################################################

jdk-build-tools: langtools-interim
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f Tools.gmk java-tools SHUFFLED=true)

# TODO: It would be nice if this dependency on Hotspot could be reduced.
# Since sajdi is now in its own module, no need to depend on hotspot.
jdk-gensrc: jdk-build-tools langtools-interim
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f GenerateSources.gmk SHUFFLED=true)

jdk-gendata: langtools-interim jdk-build-tools
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f GenerateData.gmk SHUFFLED=true)

jdk-genclasses: langtools-interim corba-interim java-compile
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f GenerateClasses.gmk SHUFFLED=true)

jdk-createpolicyjars:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CreatePolicyJars.gmk SHUFFLED=true)

import-hotspot: hotspot
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f Import.gmk hotspot SHUFFLED=true)

jdk-copyfiles: jdk-build-tools
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CopyFiles.gmk SHUFFLED=true)

jdk-libs: import-hotspot java-compile
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CompileNativeLibraries.gmk SHUFFLED=true)

jdk-launchers: jdk-libs
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CompileLaunchers.gmk SHUFFLED=true)

jdk-demos: java-compile
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CompileDemos.gmk SHUFFLED=true)

jdk-samples:
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CopySamples.gmk SHUFFLED=true)

# The jdk target results in a runnable exploded image
jdk: java-compile jdk-gendata jdk-genclasses jdk-libs jdk-launchers \
    jdk-createpolicyjars import-hotspot jdk-copyfiles

.PHONY: jdk-build-tools jdk-gensrc jdk-gendata jdk-genclasses jdk-createpolicyjars \
    import-hotspot jdk-copyfiles jdk-libs jdk-launchers jdk-demos jdk-samples jdk

################################################################################

# Compile all java modules except nashorn
java-compile: jdk-gensrc langtools-gensrc corba-gensrc
	+($(CD) $(SRC_ROOT)/make && $(MAKE) -f CompileJavaModules.gmk SHUFFLED=true)

# Generate the modules.ser file
java-modules: java-compile nashorn jdk-genclasses
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f GenerateModules.gmk SHUFFLED=true)

.PHONY: java-compile java-modules

################################################################################

# Create jmods
jmods: jdk java-modules
	+($(CD) $(SRC_ROOT)/make && $(MAKE) -I $(JDK_TOPDIR)/make \
	    -f CreateJmods.gmk SHUFFLED=true jmods)

# Create images from jmods
module-images: jmods
	+($(CD) $(SRC_ROOT)/make && $(MAKE) -I $(JDK_TOPDIR)/make \
	    -f CreateJmods.gmk SHUFFLED=true jdk-image)

images: module-images

.PHONY: jmods module-images images

################################################################################
# Legacy image targets

# Stores the tips for each repository. This file is be used when constructing the jdk image and can be
# used to track the exact sources used to build that image.
source-tips: $(OUTPUT_ROOT)/source_tips
$(OUTPUT_ROOT)/source_tips: FRC
	@$(MKDIR) -p $(@D)
	@$(RM) $@
	@$(call GetSourceTips)

create-security-jars: jdk
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CreateSecurityJars.gmk SHUFFLED=true)

legacy-jdk: jdk create-security-jars

nashorn-jar: nashorn
	+($(CD) $(NASHORN_TOPDIR)/make && $(MAKE) -f BuildNashorn.gmk all SHUFFLED=true)

# Creates the legacy jar files (rt.jar resources.jar etc)
create-jars: legacy-jdk nashorn-jar jdk-demos
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f CreateJars.gmk SHUFFLED=true)

# Creates the legacy images (j2sdk-image j2re-image etc)
legacy-images: create-jars jdk-demos jdk-samples legacy-jdk source-tips
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f Images.gmk SHUFFLED=true)
        ifeq ($(OPENJDK_TARGET_OS), macosx)
	  +($(CD) $(JDK_TOPDIR)/make && $(MAKE) -f Bundles.gmk SHUFFLED=true)
        endif

# Create Compact Profile jars
# Need to depend on create-jars as otherwise there will races between all the
# invocations of CreateJars.gmk.
%-create-jars: create-jars
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) PROFILE=$* -f CreateJars.gmk SHUFFLED=true)

# Create Compact Profile images
%-images: %-create-jars jdk-demos jdk-samples legacy-jdk source-tips
	+($(CD) $(JDK_TOPDIR)/make && $(MAKE) PROFILE=$* \
	    JRE_IMAGE_DIR=$(IMAGES_OUTPUTDIR)/j2re-$(word $(call profile_number,$*),$(PROFILE_NAMES))-image \
	    -f Images.gmk profile-image SHUFFLED=true)

# Make each profile name a target that depends on it's images target.
$(foreach p, $(ALL_PROFILES), $(eval $(p): $(p)-images))

legacy-profiles: $(ALL_PROFILES)

.PHONY: source-tips create-security-jars legacy-jdk nashorn-jar create-jars \
    legacy-images

################################################################################

# Two source files needed for doc generation are generated in jdk-genclasses.
docs-javadoc: jdk-gensrc corba-gensrc langtools-gensrc jdk-genclasses
	+($(CD) $(SRC_ROOT)/make && $(MAKE) -f Javadoc.gmk docs SHUFFLED=true)

docs-jvmtidoc: hotspot
	+($(CD) $(SRC_ROOT)/make && $(MAKE) -f Javadoc.gmk jvmtidocs SHUFFLED=true)

docs: docs-javadoc docs-jvmtidoc

.PHONY: docs docs-javadoc docs-jvmtidoc

################################################################################

all: images

.PHONY: default all

FRC: # Force target

#
# Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# This must be the first rule
default: all

include $(SPEC)
include JigsawSpecMod.gmk
include MakeBase.gmk
include JavaCompilation.gmk

#JAVAC_WARNINGS := -Xlint:-unchecked,-deprecation,-overrides,auxiliaryclass,classfile,dep-ann,divzero,empty,try,varargs -Werror

$(eval $(call SetupJavaCompiler,GENERATE_JDKBYTECODE, \
    JVM := $(JAVA), \
    JAVAC := $(NEW_JAVAC), \
    FLAGS := -source 9 -target 9 \
        -encoding ascii -XDignore.symbol.file=true $(JAVAC_WARNINGS) \
        $(GENERATE_JDKBYTECODE_EXTRA_FLAGS), \
    SERVER_DIR := $(SJAVAC_SERVER_DIR), \
    SERVER_JVM := $(SJAVAC_SERVER_JAVA)))

################################################################################
# Module specific build settings

java.base_COPY := .icu .dat .spp content-types.properties
java.base_CLEAN := intrinsic.properties

java.base_EXCLUDES += java/lang/doc-files

# Exclude BreakIterator classes that are just used in compile process to generate
# data files and shouldn't go in the product
java.base_EXCLUDE_FILES += sun/text/resources/BreakIteratorRules.java
java.base_EXCLUDE_FILES += sun/util/locale/AsciiUtil.java

ifndef OPENJDK
  # Use the closed version of this file
  java.base_EXCLUDE_FILES += $(JDK_TOPDIR)/$(SRC_SUBDIR)/java.base/share/classes/javax/crypto/JarVerifier.java
endif

ifeq ($(OPENJDK_TARGET_OS), macosx)
  JAVA_BASE_UNIX_DIR := $(JDK_TOPDIR)/$(SRC_SUBDIR)/java.base/unix/classes
  # TODO: make JavaCompilation handle overrides automatically instead of excluding here
  # These files are overridden in macosx
  java.base_EXCLUDE_FILES += \
      $(JAVA_BASE_UNIX_DIR)/sun/util/locale/provider/HostLocaleProviderAdapterImpl.java \
      $(JAVA_BASE_UNIX_DIR)/java/net/DefaultInterface.java \
      $(JAVA_BASE_UNIX_DIR)/java/lang/ClassLoaderHelper.java \
      $(JAVA_BASE_UNIX_DIR)/sun/nio/ch/DefaultSelectorProvider.java \
      #
  # This is just skipped on macosx
  java.base_EXCLUDE_FILES += $(JAVA_BASE_UNIX_DIR)/sun/nio/fs/GnomeFileTypeDetector.java
endif

ifneq ($(OPENJDK_TARGET_OS), solaris)
  java.base_EXCLUDE_FILES += \
      SolarisAclFileAttributeView.java \
      SolarisFileStore.java \
      SolarisFileSystem.java \
      SolarisFileSystemProvider.java \
      SolarisNativeDispatcher.java \
      SolarisUserDefinedFileAttributeView.java \
      SolarisWatchService.java \
      SolarisAclFileAttributeView.java \
      SolarisLoginModule.java \
      SolarisSystem.java \
      sun/nio/ch/DevPollArrayWrapper.java \
      sun/nio/ch/DevPollSelectorImpl.java \
      sun/nio/ch/DevPollSelectorProvider.java \
      sun/nio/ch/EventPortSelectorImpl.java \
      sun/nio/ch/EventPortSelectorProvider.java \
      sun/nio/ch/EventPortWrapper.java \
      sun/nio/ch/SolarisAsynchronousChannelProvider.java \
      sun/nio/ch/SolarisEventPort.java \
      #
endif

ifneq ($(OPENJDK_TARGET_OS), linux)
  java.base_EXCLUDE_FILES += \
      sun/nio/ch/EPoll.java \
      sun/nio/ch/EPollArrayWrapper.java \
      sun/nio/ch/EPollPort.java \
      sun/nio/ch/EPollSelectorImpl.java \
      sun/nio/ch/EPollSelectorProvider.java \
      sun/nio/ch/LinuxAsynchronousChannelProvider.java \
      sun/nio/fs/LinuxDosFileAttributeView.java \
      sun/nio/fs/LinuxFileStore.java \
      sun/nio/fs/LinuxFileSystem.java \
      sun/nio/fs/LinuxFileSystemProvider.java \
      sun/nio/fs/MagicFileTypeDetector.java \
      sun/nio/fs/LinuxNativeDispatcher.java \
      sun/nio/fs/LinuxUserDefinedFileAttributeView.java \
      sun/nio/fs/LinuxWatchService.java \
      #
endif

ifneq ($(OPENJDK_TARGET_OS), macosx)
  java.base_EXCLUDE_FILES += \
      sun/nio/ch/BsdAsynchronousChannelProvider.java \
      sun/nio/ch/KQueue.java \
      sun/nio/ch/KQueuePort.java \
      sun/nio/fs/BsdFileStore.java \
      sun/nio/fs/BsdFileSystem.java \
      sun/nio/fs/BsdFileSystemProvider.java \
      sun/nio/fs/BsdNativeDispatcher.java \
      sun/nio/fs/MacOSXFileSystemProvider.java \
      sun/nio/fs/MacOSXFileSystem.java \
      sun/nio/fs/MacOSXNativeDispatcher.java \
      #
endif

ifneq ($(OPENJDK_TARGET_OS),aix)
  java.base_EXCLUDE_FILES += \
      sun/nio/ch/AixAsynchronousChannelProvider.java \
      sun/nio/ch/AixPollPort.java \
      sun/nio/fs/AixFileStore.java \
      sun/nio/fs/AixFileSystem.java \
      sun/nio/fs/AixFileSystemProvider.java \
      sun/nio/fs/AixNativeDispatcher.java \
      #
endif

ifeq ($(filter $(OPENJDK_TARGET_OS), solaris macosx aix), )
  #
  # only solaris, macosx and aix
  #
  java.base_EXCLUDE_FILES += sun/nio/fs/PollingWatchService.java
endif

ifeq ($(OPENJDK_TARGET_OS), windows)
  java.base_EXCLUDE_FILES += \
      sun/nio/ch/AbstractPollSelectorImpl.java \
      sun/nio/ch/PollSelectorProvider.java \
      sun/nio/ch/SimpleAsynchronousFileChannelImpl.java \
      #
endif

################################################################################

java.desktop_COPY := .gif .png .wav .txt .xml .css
java.desktop_CLEAN := iio-plugin.properties

java.desktop_EXCLUDES += \
    java/awt/doc-files \
    javax/swing/doc-files \
    javax/swing/text/doc-files \
    javax/swing/plaf/synth/doc-files \
    javax/swing/undo/doc-files \
    sun/awt/X11/doc-files \
    #

# The exception handling of swing beaninfo
# These resources violates the convention of having code and resources together under
# $(JDK_TOPDIR)/src/.../classes directories
$(eval $(call SetupCopyFiles,COPY_BEANINFO, \
    SRC := $(JDK_TOPDIR)/make/data/swingbeaninfo/images, \
    DEST := $(JDK_OUTPUTDIR)/modules/java.desktop/javax/swing/beaninfo/images, \
    FILES := $(wildcard $(JDK_TOPDIR)/make/data/swingbeaninfo/images/*.gif)))

java.desktop_COPY_EXTRA += $(COPY_BEANINFO)

java.desktop_EXCLUDE_FILES += \
    javax/swing/plaf/nimbus/InternalFrameTitlePanePainter.java \
    javax/swing/plaf/nimbus/OptionPaneMessageAreaPainter.java \
    javax/swing/plaf/nimbus/ScrollBarPainter.java \
    javax/swing/plaf/nimbus/SliderPainter.java \
    javax/swing/plaf/nimbus/SpinnerPainter.java \
    javax/swing/plaf/nimbus/SplitPanePainter.java \
    javax/swing/plaf/nimbus/TabbedPanePainter.java \
    sun/awt/resources/security-icon-bw16.png \
    sun/awt/resources/security-icon-bw24.png \
    sun/awt/resources/security-icon-bw32.png \
    sun/awt/resources/security-icon-bw48.png \
    sun/awt/resources/security-icon-interim16.png \
    sun/awt/resources/security-icon-interim24.png \
    sun/awt/resources/security-icon-interim32.png \
    sun/awt/resources/security-icon-interim48.png \
    sun/awt/resources/security-icon-yellow16.png \
    sun/awt/resources/security-icon-yellow24.png \
    sun/awt/resources/security-icon-yellow32.png \
    sun/awt/resources/security-icon-yellow48.png \
    sun/awt/X11/java-icon16.png \
    sun/awt/X11/java-icon24.png \
    sun/awt/X11/java-icon32.png \
    sun/awt/X11/java-icon48.png \
    .template \
    #

ifeq ($(OPENJDK_TARGET_OS), macosx)
  # exclude all X11 on Mac.
  java.desktop_EXCLUDES += sun/awt/X11
  java.desktop_EXCLUDE_FILES += \
      $(JDK_TOPDIR)/$(SRC_SUBDIR)/java.desktop/unix/classes/sun/java2d/BackBufferCapsProvider.java \
      #
else
  # TBD: figure out how to eliminate this long list
  java.desktop_EXCLUDE_FILES += \
      sun/awt/X11/ScreenFormat.java \
      sun/awt/X11/XArc.java \
      sun/awt/X11/XChar2b.java \
      sun/awt/X11/XCharStruct.java \
      sun/awt/X11/XClassHint.java \
      sun/awt/X11/XComposeStatus.java \
      sun/awt/X11/XExtCodes.java \
      sun/awt/X11/XFontProp.java \
      sun/awt/X11/XFontSetExtents.java \
      sun/awt/X11/XFontStruct.java \
      sun/awt/X11/XGCValues.java \
      sun/awt/X11/XHostAddress.java \
      sun/awt/X11/XIMCallback.java \
      sun/awt/X11/XIMHotKeyTrigger.java \
      sun/awt/X11/XIMHotKeyTriggers.java \
      sun/awt/X11/XIMPreeditCaretCallbackStruct.java \
      sun/awt/X11/XIMPreeditDrawCallbackStruct.java \
      sun/awt/X11/XIMPreeditStateNotifyCallbackStruct.java \
      sun/awt/X11/XIMStatusDrawCallbackStruct.java \
      sun/awt/X11/XIMStringConversionCallbackStruct.java \
      sun/awt/X11/XIMStringConversionText.java \
      sun/awt/X11/XIMStyles.java \
      sun/awt/X11/XIMText.java \
      sun/awt/X11/XIMValuesList.java \
      sun/awt/X11/XImage.java \
      sun/awt/X11/XKeyboardControl.java \
      sun/awt/X11/XKeyboardState.java \
      sun/awt/X11/XOMCharSetList.java \
      sun/awt/X11/XOMFontInfo.java \
      sun/awt/X11/XOMOrientation.java \
      sun/awt/X11/XPoint.java \
      sun/awt/X11/XRectangle.java \
      sun/awt/X11/XSegment.java \
      sun/awt/X11/XStandardColormap.java \
      sun/awt/X11/XTextItem.java \
      sun/awt/X11/XTextItem16.java \
      sun/awt/X11/XTextProperty.java \
      sun/awt/X11/XTimeCoord.java \
      sun/awt/X11/XWindowChanges.java \
      sun/awt/X11/XdbeSwapInfo.java \
      sun/awt/X11/XmbTextItem.java \
      sun/awt/X11/XwcTextItem.java
endif

ifndef OPENJDK
  ifeq ($(OPENJDK_TARGET_OS), windows)
    # This gets built on unix platforms implicitly in the old build even though
    # it's excluded in the closed build.
    java.desktop_EXCLUDES += sun/java2d/pisces

    java.desktop_EXCLUDES += com/sun/java/accessibility/extensions
    # AccessBridge is compiled separately below.
    java.desktop_EXCLUDE_FILES += \
        AccessBridge.java \
        AccessBridgeLoader.java \
        com/sun/java/accessibility/util/java/awt/ChoiceTranslator.java \
        #
  endif
endif

ifeq ($(OPENJDK_TARGET_OS), windows)
  java.desktop_EXCLUDES += com/sun/java/swing/plaf/gtk
endif

ifdef BUILD_HEADLESS_ONLY
  java.desktop_EXCLUDES += sun/applet
endif

ifdef OPENJDK
  java.desktop_EXCLUDES += sun/java2d/cmm/kcms \
      sun/dc
endif

# Used on windows and macosx
ifeq ($(filter $(OPENJDK_TARGET_OS), windows macosx), )
  java.desktop_EXCLUDE_FILES += sun/awt/AWTCharset.java
endif

# These files do not appear in the build result of the old build. This
# is because they are generated sources, but the AUTO_JAVA_FILES won't
# pick them up since they aren't generated when the source dirs are
# searched and they aren't referenced by any other classes so they won't
# be picked up by implicit compilation. On a rebuild, they are picked up
# and compiled. Exclude them here to produce the same rt.jar as the old
# build does when building just once.
java.desktop_EXCLUDE_FILES += \
    javax/swing/plaf/nimbus/InternalFrameTitlePanePainter.java \
    javax/swing/plaf/nimbus/OptionPaneMessageAreaPainter.java \
    javax/swing/plaf/nimbus/ScrollBarPainter.java \
    javax/swing/plaf/nimbus/SliderPainter.java \
    javax/swing/plaf/nimbus/SpinnerPainter.java \
    javax/swing/plaf/nimbus/SplitPanePainter.java \
    javax/swing/plaf/nimbus/TabbedPanePainter.java \
    #

ifeq ($(OPENJDK_TARGET_OS), macosx)
  # These files are duplicated in MACOSX_SRC_DIRS
  java.desktop_EXCLUDE_FILES += \
      $(JDK_TOPDIR)/$(SRC_SUBDIR)/java.desktop/unix/classes/sun/java2d/BackBufferCapsProvider.java \
      #
endif

################################################################################

java.sql.rowset_CLEAN_FILES := $(wildcard \
    $(JDK_TOPDIR)/$(SRC_SUBDIR)/java.sql.rowset/share/classes/com/sun/rowset/*.properties \
    $(JDK_TOPDIR)/$(SRC_SUBDIR)/java.sql.rowset/share/classes/javax/sql/rowset/*.properties)

################################################################################
# Exclude building of IIOP transport for RMI Connector
java.management_EXCLUDES := com/sun/jmx/remote/protocol/iiop

ifdef OPENJDK
  java.management_EXCLUDES := \
      com/sun/jmx/snmp \
      sun/management/snmp \
      #
endif

################################################################################

java.rmi_CLEAN_FILES := $(wildcard \
    $(JDK_TOPDIR)/$(SRC_SUBDIR)/java.rmi/share/classes/sun/rmi/registry/resources/*.properties \
    $(JDK_TOPDIR)/$(SRC_SUBDIR)/java.rmi/share/classes/sun/rmi/server/resources/*.properties)

################################################################################

java.corba_COPY := .prp
java.corba_CLEAN := .properties

java.corba_EXCLUDES := \
    com/sun/corba/se/PortableActivationIDL \
    com/sun/tools/corba/se/logutil \
    #
java.corba_EXCLUDE_FILES := \
    com/sun/corba/se/impl/presentation/rmi/JNDIStateFactoryImpl.java \
    com/sun/corba/se/spi/presentation/rmi/StubWrapper.java \
    com/sun/org/omg/CORBA/IDLTypeOperations.java \
    com/sun/org/omg/CORBA/IRObjectOperations.java \
    org/omg/PortableInterceptor/UNKNOWN.java \
    com/sun/tools/corba/se/idl/ResourceBundleUtil.java \
    com/sun/corba/se/impl/presentation/rmi/jndi.properties \
    #

################################################################################

java.xml_CLEAN := .properties

################################################################################

java.xml.bind_CLEAN := .properties

################################################################################

java.xml.soap_CLEAN := .properties

################################################################################

java.xml.ws_COPY := .xml
java.xml.ws_CLEAN := .properties

################################################################################

java.naming_CLEAN := jndiprovider.properties

################################################################################

java.security.saaj_CLEAN := .properties

################################################################################

java.xml.crypto_COPY := .dtd .xml
java.xml.crypto_CLEAN := .properties

################################################################################

ifneq ($(OPENJDK_TARGET_OS), windows)
  jdk.security.auth_EXCLUDE_FILES += \
      NTLoginModule.java \
      NTSystem.java \
      #
else
  jdk.security.auth_EXCLUDE_FILES += \
      UnixLoginModule.java \
      UnixSystem.java \
      #
endif

################################################################################

jdk.charsets_COPY := .dat

################################################################################

jdk.compiler_COPY := javax.tools.JavaCompilerTool

jdk.javadoc_COPY := .xml .css .js

################################################################################

ifndef OPENJDK
  jdk.jfr_COPY := .xsd
endif

################################################################################

ifeq ($(OPENJDK_TARGET_OS), macosx)
  jdk.sctp_EXCLUDE_FILES := \
      $(JDK_TOPDIR)/$(SRC_SUBDIR)/jdk.sctp/unix/classes/sun/nio/ch/sctp/SctpChannelImpl.java \
      $(JDK_TOPDIR)/$(SRC_SUBDIR)/jdk.sctp/unix/classes/sun/nio/ch/sctp/SctpMultiChannelImpl.java \
      $(JDK_TOPDIR)/$(SRC_SUBDIR)/jdk.sctp/unix/classes/sun/nio/ch/sctp/SctpServerChannelImpl.java \
      #
endif

ifeq ($(OPENJDK_TARGET_OS),aix)
  # These files are duplicated in AIX_SRC_DIRS
  jdk.sctp_EXCLUDE_FILES += \
      $(JDK_TOPDIR)/$(SRC_SUBDIR)/java.sctp/unix/classes/sun/nio/ch/sctp/SctpChannelImpl.java \
      $(JDK_TOPDIR)/$(SRC_SUBDIR)/java.sctp/unix/classes/sun/nio/ch/sctp/SctpMultiChannelImpl.java \
      $(JDK_TOPDIR)/$(SRC_SUBDIR)/java.sctp/unix/classes/sun/nio/ch/sctp/SctpServerChannelImpl.java \
      #
endif

################################################################################

jdk.jconsole_COPY := .gif .png

jdk.jconsole_CLEAN_FILES := $(wildcard \
    $(JDK_TOPDIR)/$(SRC_SUBDIR)/jdk.jconsole/share/classes/sun/tools/jconsole/resources/*.properties)

################################################################################

jdk.jdi_EXCLUDES := \
    com/sun/tools/example/debug/bdi \
    com/sun/tools/example/debug/event \
    com/sun/tools/example/debug/gui \
    com/sun/jdi/doc-files \
    #

jdk.jdi_EXCLUDE_FILES += jdi-overview.html

################################################################################

jdk.legacytools_CLEAN_FILES := $(wildcard \
    $(patsubst %, $(JDK_TOPDIR)/$(SRC_SUBDIR)/jdk.legacytools/share/classes/%/*.properties, \
        sun/tools/serialver/resources \
        com/sun/tools/script/shell))

################################################################################

jdk.tools_COPY := .gif .png .js oqlhelp.html .txt aliasmap _options

jdk.tools_CLEAN_FILES := $(wildcard \
    $(patsubst %, $(JDK_TOPDIR)/$(SRC_SUBDIR)/jdk.tools/share/classes/%/*.properties, \
        sun/rmi/rmic/resources \
        sun/tools/javac/resources))

jdk.tools_EXCLUDES := \
    com/sun/tools/example/trace \
    #

ifneq ($(OPENJDK_TARGET_OS), solaris)
  jdk.tools_EXCLUDE_FILES += \
      sun/tools/attach/SolarisAttachProvider.java \
      sun/tools/attach/SolarisVirtualMachine.java \
      #
endif

ifneq ($(OPENJDK_TARGET_OS), linux)
  jdk.tools_EXCLUDE_FILES += \
      sun/tools/attach/LinuxAttachProvider.java \
      sun/tools/attach/LinuxVirtualMachine.java \
      #
endif

ifneq ($(OPENJDK_TARGET_OS), macosx)
  jdk.tools_EXCLUDE_FILES += \
      sun/tools/attach/BsdAttachProvider.java \
      sun/tools/attach/BsdVirtualMachine.java \
      #
endif

ifneq ($(OPENJDK_TARGET_OS),aix)
  jdk.tools_EXCLUDE_FILES += \
      sun/tools/attach/AixAttachProvider.java \
      sun/tools/attach/AixVirtualMachine.java \
      #
endif

################################################################################

jdk.jvmstat_COPY := aliasmap jstat_options jstat_unsupported_options

################################################################################

jdk.xml.ws.tools_CLEAN := .properties
jdk.xml.ws.tools_COPY := .xsd JAXBContextFactory.java ZeroOneBooleanAdapter.java

################################################################################

sun.charsets_COPY := .dat

################################################################################

jdk.localedata_COPY := _dict _th
# Exclude BreakIterator classes that are just used in compile process to generate
# data files and shouldn't go in the product
jdk.localedata_EXCLUDE_FILES := sun/text/resources/th/BreakIteratorRules_th.java

################################################################################
# Setup the compilation of each module
#
# Do not include nashorn src here since it needs to be compiled separately due
# to nasgen.
#
# Order src dirs in order of override with the most important first. Generated
# source before static source and platform specific source before shared.
#
# To use this variable, use $(call ALL_SRC_DIRS,module) with no space.
ifndef OPENJDK
  OS_SRC_DIRS += $(JDK_TOPDIR)/$(SRC_SUBDIR)/closed/$1/$(OPENJDK_TARGET_OS)/classes
  OS_API_SRC_DIRS += $(JDK_TOPDIR)/$(SRC_SUBDIR)/closed/$1/$(OPENJDK_TARGET_OS_API_DIR)/classes
  SHARE_SRC_DIRS += $(JDK_TOPDIR)/$(SRC_SUBDIR)/closed/$1/share/classes
endif

GENERATED_SRC_DIRS += \
    $(JDK_OUTPUTDIR)/gensrc/$1 \
    $(LANGTOOLS_OUTPUTDIR)/gensrc/$1 \
    $(CORBA_OUTPUTDIR)/gensrc/$1 \
    $(JDK_OUTPUTDIR)/gensrc_no_srczip/$1 \
    #

OS_SRC_DIRS += $(JDK_TOPDIR)/$(SRC_SUBDIR)/$1/$(OPENJDK_TARGET_OS)/classes

OS_API_SRC_DIRS += $(JDK_TOPDIR)/$(SRC_SUBDIR)/$1/$(OPENJDK_TARGET_OS_API_DIR)/classes

SHARE_SRC_DIRS += \
    $(JDK_TOPDIR)/$(SRC_SUBDIR)/$1/share/classes \
    $(LANGTOOLS_TOPDIR)/$(SRC_SUBDIR)/$1/share/classes \
    $(CORBA_TOPDIR)/$(SRC_SUBDIR)/$1/share/classes \
    $(JAXP_TOPDIR)/$(SRC_SUBDIR)/$1/share/classes \
    $(JAXWS_TOPDIR)/$(SRC_SUBDIR)/$1/share/classes \
    #

ALL_SRC_DIRS = \
    $(GENERATED_SRC_DIRS) \
    $(OS_SRC_DIRS) \
    $(OS_API_SRC_DIRS) \
    $(SHARE_SRC_DIRS) \
    #

# Find all modules with java sources. Filter out nashorn since it needs to be
# compiled separately.
ALL_JAVA_MODULES := $(filter-out jdk.scripting.nashorn, $(call FindJavaModules))
JAVA_MODULES := $(ALL_JAVA_MODULES)

# This macro sets up compilation of a module and declares dependencies for it.
# Param 1 - module name
define SetupModuleCompilation
  # Find the module dependencies by parsing modules.list file
  $1_DEPS := $$(call FindDepsForModule, $1)

  $1_CLASSPATH := $$(addprefix $(JDK_OUTPUTDIR)/modules/,$$($1_DEPS))
  ifeq ($1, jdk.hotspot.sa)
    ## The source of this module is compiled elsewhere, hotspot, and imported.
    ## Service types are required in the classpath when compiing module-info
    $1_CLASSPATH := $$($1_CLASSPATH) $$(addprefix $(JDK_OUTPUTDIR)/modules/,jdk.hotspot.sa)
  endif
  $1_CLASSPATH := $$(subst $$(SPACE),$$(PATH_SEP),$$($1_CLASSPATH))
  $1_JAVAC_FLAGS := -bootclasspath "$$($1_CLASSPATH)"

  $$(eval $$(call SetupJavaCompilation,$1, \
      SETUP := GENERATE_JDKBYTECODE, \
      SRC := $$(wildcard $$(call ALL_SRC_DIRS,$1)), \
      BIN := $(JDK_OUTPUTDIR)/modules/$1, \
      HEADERS := $(JDK_OUTPUTDIR)/gensrc_headers/$1, \
      ADD_JAVAC_FLAGS := $$($1_JAVAC_FLAGS)))

  $1: $$($1) $$($1_COPY_EXTRA)

  # Declare dependencies between java compilation of different modules.
  # Since not all modules have been declared yet, or might be declared
  # in different invocations of this file, use the macro to find the 
  # correct target file to depend on.
# Only the javac compilation actually depends on other modules so limit
# dependency declaration to that by using the *_COMPILE_TARGET variable.
  $$($1_COMPILE_TARGETS): $$(foreach d,$$($1_DEPS), \
      $$(call SetupJavaCompilationCompileTarget, $$d, $(JDK_OUTPUTDIR)/modules/$$d))
endef

# Setup compilation for each module
$(foreach m,$(JAVA_MODULES),$(eval $(call SetupModuleCompilation,$m)))

################################################################################
# Copy zh_HK properties files from zh_TW

$(JDK_OUTPUTDIR)/modules/%_zh_HK.properties: $(JDK_OUTPUTDIR)/modules/%_zh_TW.properties
	$(install-file)

define CreateHkTargets
  $(patsubst $(JDK_TOPDIR)/$(SRC_SUBDIR)/%, $(JDK_OUTPUTDIR)/modules/%, \
    $(subst /share/classes,, \
      $(subst _zh_TW,_zh_HK, $(filter %_zh_TW.properties, $1))))
endef

java.sql.rowset: $(call CreateHkTargets, $(java.sql.rowset_CLEAN_FILES))
java.rmi: $(call CreateHkTargets, $(java.rmi_CLEAN_FILES))
jdk.tools: $(call CreateHkTargets, $(jdk.tools_CLEAN_FILES))

################################################################################

# Compile accessbridge separately. Need to figure out how to handle this properly.
ifndef OPENJDK
  ifeq ($(OPENJDK_TARGET_OS), windows)
    AB_CLASSPATH := $(java.desktop_CLASSPATH)$(PATH_SEP)$(JDK_OUTPUTDIR)/modules/java.desktop
    ifeq ($(OPENJDK_TARGET_CPU_BITS), 32)
      $(eval $(call SetupJavaCompilation,BUILD_ACCESSBRIDGE_32, \
          SETUP := GENERATE_JDKBYTECODE, \
          ADD_JAVAC_FLAGS := -bootclasspath "$(AB_CLASSPATH)", \
          SRC := $(JDK_OUTPUTDIR)/gensrc_ab/32bit, \
          BIN := $(JDK_OUTPUTDIR)/classes_ab/32bit, \
          HEADERS := $(JDK_OUTPUTDIR)/gensrc_headers/java.desktop))

      $(BUILD_ACCESSBRIDGE_32_COMPILE_TARGETS): $(java.desktop_COMPILE_TARGETS)

      $(eval $(call SetupJavaCompilation,BUILD_ACCESSBRIDGE_LEGACY, \
          SETUP := GENERATE_JDKBYTECODE, \
          ADD_JAVAC_FLAGS := -bootclasspath "$(AB_CLASSPATH)", \
          SRC := $(JDK_OUTPUTDIR)/gensrc_ab/legacy, \
          BIN := $(JDK_OUTPUTDIR)/classes_ab/legacy, \
          HEADERS := $(JDK_OUTPUTDIR)/gensrc_headers/java.desktop))

      $(BUILD_ACCESSBRIDGE_LEGACY_COMPILE_TARGETS): $(java.desktop_COMPILE_TARGETS)

    else

      $(eval $(call SetupJavaCompilation,BUILD_ACCESSBRIDGE_64, \
          SETUP := GENERATE_JDKBYTECODE, \
          ADD_JAVAC_FLAGS := -bootclasspath "$(AB_CLASSPATH)", \
          SRC := $(JDK_OUTPUTDIR)/gensrc_ab/64bit, \
          BIN := $(JDK_OUTPUTDIR)/classes_ab/64bit, \
          HEADERS := $(JDK_OUTPUTDIR)/gensrc_headers/java.desktop))

      $(BUILD_ACCESSBRIDGE_64_COMPILE_TARGETS): $(java.desktop_COMPILE_TARGETS)

    endif
    java.desktop: $(BUILD_ACCESSBRIDGE_32) $(BUILD_ACCESSBRIDGE_64) \
        $(BUILD_ACCESSBRIDGE_LEGACY)
  endif
endif

################################################################################

all: $(JAVA_MODULES) \
    $(BUILD_ACCESSBRIDGE_32) \
    $(BUILD_ACCESSBRIDGE_64) \
    $(BUILD_ACCESSBRIDGE_LEGACY)

.PHONY: all $(JAVA_MODULES)

#
# Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# This must be the first rule
default: all

include $(SPEC)
include JigsawSpecMod.gmk
include MakeBase.gmk
include JavaCompilation.gmk

#JAVAC_WARNINGS := -Xlint:-unchecked,-deprecation,-overrides,auxiliaryclass,classfile,dep-ann,divzero,empty,try,varargs -Werror

$(eval $(call SetupJavaCompiler,GENERATE_JDKBYTECODE, \
    JVM := $(JAVA), \
    JAVAC := $(NEW_JAVAC), \
    FLAGS := -source 8 -target 8 \
        -encoding ascii -XDignore.symbol.file=true $(JAVAC_WARNINGS) \
        $(GENERATE_JDKBYTECODE_EXTRA_FLAGS), \
    SERVER_DIR := $(SJAVAC_SERVER_DIR), \
    SERVER_JVM := $(SJAVAC_SERVER_JAVA)))

ALL_SRC_DIRS := \
    $(JDK_TOPDIR)/src/share/modules \
    $(LANGTOOLS_TOPDIR)/src/share/modules \
    $(CORBA_TOPDIR)/src/share/modules \
    $(JAXP_TOPDIR)/src/share/modules \
    $(JAXWS_TOPDIR)/src/share/modules \
    $(JDK_TOPDIR)/src/$(OPENJDK_TARGET_OS_API_DIR)/modules \
    $(JDK_OUTPUTDIR)/gensrc \
    $(LANGTOOLS_OUTPUTDIR)/gensrc \
    $(CORBA_OUTPUTDIR)/gensrc

# Find all modules with java sources by looking in the source dirs
JAVA_MODULES := $(sort $(notdir $(wildcard $(patsubst %,%/*,$(filter %modules, $(ALL_SRC_DIRS))))))

MODULE_INFO_DIR := $(OUTPUT_ROOT)/jdk/genmodules/src

# This macro sets up compilation of a module and declares dependencies for it.
# Param 1 - module name
define SetupModuleCompilation
  # Find the module dependencies by parsing the module-info.java file
  $1_DEPS := $(filter $(JAVA_MODULES),$(sort $(subst .internal,,$(subst ;,,\
      $(shell $(AWK) '/requires/ { print $2 }' $(MODULE_INFO_DIR)/$1/module-info.java)))))
  ifneq ($$($1_DEPS), )
    $1_CLASSPATH := $$(addprefix $(JDK_OUTPUTDIR)/modules/,$$($1_DEPS))
    $1_CLASSPATH := $$(subst $$(SPACE),$$(PATH_SEP),$$($1_CLASSPATH))
    $1_JAVAC_FLAGS := -bootclasspath "$$($1_CLASSPATH)"
  endif

  $$(eval $$(call SetupJavaCompilation,$1, \
      SETUP := GENERATE_JDKBYTECODE, \
      SRC := $(wildcard $(patsubst %,%/$1,$(ALL_SRC_DIRS))), \
      BIN := $(JDK_OUTPUTDIR)/modules/$1, \
      HEADERS := $(JDK_OUTPUTDIR)/gensrc_headers/$1, \
      ADD_JAVAC_FLAGS := $$($1_JAVAC_FLAGS)))

  $1: $$($1)
endef

# This macro declares the dependencies in make. This needs to happen in 
# a separate call when all the module name variables have been defined.
define DeclareModuleDependencies
  $$($1): $$(foreach d,$$($1_DEPS),$$($$d))
endef

# Setup compilation for each module
$(foreach m,$(JAVA_MODULES),$(eval $(call SetupModuleCompilation,$m)))
$(foreach m,$(JAVA_MODULES),$(eval $(call DeclareModuleDependencies,$m)))

all: $(JAVA_MODULES)

.PHONY: all $(JAVA_MODULES)

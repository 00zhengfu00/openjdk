#
# Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

default: all

include $(SPEC)
include JigsawSpecMod.gmk
include MakeBase.gmk
include NativeCompilation.gmk

# Setup the java compilers for the JDK build.
include Setup.gmk

# Prepare the find cache.
ifeq ($(SHUFFLED), true)
  $(eval $(call FillCacheFind, $(JDK_TOPDIR)/src_shuffled))
else
  $(eval $(call FillCacheFind, $(JDK_TOPDIR)/src))
endif

# Build tools
include Tools.gmk

# Include the javah generated headers.
ifneq ($(SHUFFLED), true)
CFLAGS_JDKLIB += -I$(JDK_OUTPUTDIR)/gensrc_headers
CXXFLAGS_JDKLIB += -I$(JDK_OUTPUTDIR)/gensrc_headers
endif

# Put the libraries here. Different locations for different target apis.
ifeq ($(OPENJDK_TARGET_OS_API), posix)
  INSTALL_LIBRARIES_HERE := $(JDK_OUTPUTDIR)/lib$(OPENJDK_TARGET_CPU_LIBDIR)
else
  INSTALL_LIBRARIES_HERE := $(JDK_OUTPUTDIR)/bin
endif

#
# Libraries are grouped by modules.  The following defines
# variables for modules containing shared libraries.
#
ATTACH_LIBRARIES:=
BASE_LIBRARIES:=
CRW_LIBRARIES:=
DESKTOP_LIBRARIES:=
DEPLOY_OSX_LIBRARIES:=
HPROF_LIBRARIES:=
INSTRUMENT_LIBRARIES:=
JDI_TRANSPORT_LIBRARIES:=
JSDT_LIBRARIES:=
JDWP_LIBRARIES:=
JFR_LIBRARIES:=
MANAGEMENT_LIBRARIES:=
NPT_LIBRARIES :=
PREFS_LIBRARIES:=
SCTP_LIBRARIES:=
SECURITY_JAAS_LIBRARIES:=
SECURITY_KERBEROS_LIBRARIES:=
SECURITY_MSCAPI_LIBRARIES:=
SECURITY_PKCS11_LIBRARIES:=
SECURITY_SMARTCARDIO_LIBRARIES:=
SECURITY_SUNEC_LIBRARIES:=
SECURITY_UCRYPTO_LIBRARIES:=
UNPACK_LIBRARIES:=


# Absolute paths to lib files on windows for use in LDFLAGS. Should figure out a more
# elegant solution to this.
WIN_JAVA_LIB := $(JDK_OUTPUTDIR)/objs/libjava/java.lib

# Use this variable to set DEBUG_SYMBOLS true on windows for all libraries, but
# not on other platforms.
ifeq ($(OPENJDK_TARGET_OS), windows)
  DEBUG_ALL_BINARIES := true
endif

# Build everything with debugging on OpenJDK
ifdef OPENJDK
  DEBUG_ALL_BINARIES := true
endif

##########################################################################################

include lib/CoreLibraries.gmk

include lib/PlatformLibraries.gmk

include lib/NetworkingLibraries.gmk

include lib/NioLibraries.gmk

include lib/SecurityLibraries.gmk

include lib/ServiceabilityLibraries.gmk

include lib/Awt2dLibraries.gmk

include lib/SoundLibraries.gmk

##########################################################################################

BUILD_LIBRARIES := \
    $(BASE_LIBRARIES) \
    $(CRW_LIBRARIES) \
    $(DESKTOP_LIBRARIES) \
    $(INSTRUMENT_LIBRARIES) \
    $(MANAGEMENT_LIBRARIES) \
    $(NPT_LIBRARIES) \
    $(JDI_TRANSPORT_LIBRARIES) \
    $(SCRIPT_LIBRARIES) \
    $(SCTP_LIBRARIES) \
    $(JFR_LIBRARIES) \
    $(UNPACK_LIBRARIES) \
    $(SECURITY_JAAS_LIBRARIES) \
    $(SECURITY_KERBEROS_LIBRARIES) \
    $(SECURITY_MSCAPI_LIBRARIES) \
    $(SECURITY_PKCS11_LIBRARIES) \
    $(SECURITY_SMARTCARDIO_LIBRARIES) \
    $(SECURITY_SUNEC_LIBRARIES) \
    $(SECURITY_UCRYPTO_LIBRARIES) \
    $(ATTACH_LIBRARIES) \
    $(HPROF_LIBRARIES) \
    $(JDWP_LIBRARIES) \
    $(JSDT_LIBRARIES) \
    $(PREFS_LIBRARIES) \
    #

java.base: $(BASE_LIBRARIES)
java.desktop: $(DESKTOP_LIBRARIES)
java.instrument: $(INSTRUMENT_LIBRARIES)
java.management: $(MANAGEMENT_LIBRARIES) $(JFR_LIBRARIES)
javax.script: $(SCRIPT_LIBRARIES)
jdk.sctp: $(SCTP_LIBRARIES)
jdk.security.auth: $(SECURITY_JAAS_LIBRARIES)
javax.kerberos: $(SECURITY_KERBEROS_LIBRARIES)
jdk.crypto.mscapi: $(SECURITY_MSCAPI_LIBRARIES)
jdk.crypto.pkcs11: $(SECURITY_PKCS11_LIBRARIES)
javax.smartcardio: $(SECURITY_SMARTCARDIO_LIBRARIES)
jdk.crypto.ec: $(SECURITY_SUNEC_LIBRARIES)
jdk.crypto.ucrytpo: $(SECURITY_UCRYPTO_LIBRARIES)
jdk.tools: $(JDI_TRANSPORT_LIBRARIES) 
jdk.diag.tools: $(ATTACH_LIBRARIES) $(CRW_LIBRARIES) $(HPROF_LIBRARIES) $(JDWP_LIBRARIES) $(NPT_LIBRARIES)
jdk.jre.tools: $(JSDT_LIBRARIES) $(UNPACK_LIBRARIES)
java.prefs: $(PREFS_LIBRARIES)

all: $(BUILD_LIBRARIES)

.PHONY: all
.PHONY: java.base java.desktop java.instrument java.management javax.script jdk.sctp \
    jdk.security.auth javax.kerberos jdk.crypto.mscapi jdk.crypto.pkcs11 \
    javax.smartcardio jdk.crypto.ec jdk.crypto.ucrytpo jdk.tools jdk.jre.tools java.prefs
